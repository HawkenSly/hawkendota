{"version":3,"sources":["components/doughnut.js","components/Pangolier.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["doughnut","state","loading","pieData","legend","position","labels","fontColor","fetch","response","json","data","this","setState","win","lose","datasets","borderColor","backgroundColor","hoverBackgroundColor","React","Component","Pangolier","pangomatches","number","wins","ObjectLength","WinTotal","object","i","pangoWins","length","player_slot","radiant_win","console","log","key","hasOwnProperty","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+PAGqBA,E,2MAInBC,MAAQ,CACJC,SAAS,EACTC,QAAS,GACTC,OAAQ,CACNC,SAAU,SACVC,OAAQ,CACJC,UAAW,wB,2MAKP,oD,SACWC,MADX,qD,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SACH,CAACV,QAAU,CACXG,OAAQ,CACR,QAAUK,EAAKG,IACf,UAAYH,EAAKI,MAEnBC,SAAU,CAAC,CACTL,KAAM,CAACA,EAAKG,IAAKH,EAAKI,MACtBE,YAAa,UACbC,gBAAiB,CACf,UACA,WAEFC,qBAAsB,CACpB,UACA,gBAGJP,KAAKC,SAAS,CAACX,SAAS,I,qIAIxB,OACE,6BACE,8DACCU,KAAKX,MAAMC,QAAU,2CAAwB,6BAAK,kBAAC,IAAD,CAAUE,OAAQQ,KAAKX,MAAMG,OAAQO,KAAMC,KAAKX,MAAME,gB,GA3C3EiB,IAAMC,WCDvBC,E,2MAGjBrB,MAAQ,CACJsB,aAAc,CACVC,OAAQ,EACRC,KAAM,I,oIASDC,EAUAC,E,wEAAAA,E,SAAUC,GACf,IACIC,EADAC,EAAY,EAEhB,IAAKD,EAAI,EAAEA,EAAID,EAAOG,OAAQF,KAEtBD,EAAOC,GAAGG,YAAc,IAA+B,IAA1BJ,EAAOC,GAAGI,aAAwBL,EAAOC,GAAGG,YAAc,IAA+B,IAA1BJ,EAAOC,GAAGI,gBACpGH,EAGN,OADAI,QAAQC,IAAIL,GACLA,GAnBNJ,E,SAAcE,GACnB,IAAIG,EAAS,EACb,IAAK,IAAIK,KAAOR,EACRA,EAAOS,eAAeD,MACpBL,EAGV,OAAOA,GAXC,qE,SACWvB,MADX,sE,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNuB,QAAQC,IAAIxB,GAgCZC,KAAKC,SACD,CAACU,aAAe,CACZC,OAASE,EAAaf,GACtBc,KAAME,EAAShB,M,sIAOvB,OACI,6BACI,kDAAwBC,KAAKX,MAAMsB,aAAaC,QAChD,+CAAqBZ,KAAKX,MAAMsB,aAAaE,W,GA3DtBJ,aCkBxBiB,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.847b419e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\nexport default class doughnut extends React.Component {\r\n  displayName: 'DoughnutExample';\r\n\r\n\r\n  state = {\r\n      loading: true,\r\n      pieData: {},\r\n      legend: {\r\n        position: \"bottom\",\r\n        labels: {\r\n            fontColor: 'rgb(255, 255, 255)'\r\n        }\r\n    }}\r\n\r\n  async componentDidMount() {\r\n    const url = \"https://api.opendota.com/api/players/110767531/wl\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState(\r\n      {pieData : {\r\n      labels: [\r\n      'Wins:' + data.win,\r\n      'Losses:' + data.lose,\r\n    ],\r\n    datasets: [{\r\n      data: [data.win, data.lose],\r\n      borderColor: \"#282c34\",\r\n      backgroundColor: [\r\n        '#00ff33',\r\n        '#ff0d00',\r\n      ],\r\n      hoverBackgroundColor: [\r\n        '#00ff33',\r\n        '#ff0d00',\r\n      ]\r\n    }]}});\r\n    this.setState({loading: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Hawken's Dota 2 Win/Loss Ratio</h2>\r\n        {this.state.loading ? <div>loading...</div> : <div><Doughnut legend={this.state.legend} data={this.state.pieData} /></div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Pangolier extends Component {\r\n    displayname: \"PangolierStats\";\r\n\r\n    state = {\r\n        pangomatches: {\r\n            number: 1,\r\n            wins: 0\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const url = \"https://api.opendota.com/api/players/110767531/matches?hero_id=120\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        function ObjectLength( object ) {\r\n            var length = 0;\r\n            for( var key in object ) {\r\n                if( object.hasOwnProperty(key) ) {\r\n                    ++length;\r\n                }\r\n            }\r\n            return length;\r\n        };\r\n\r\n        function WinTotal( object ) {\r\n            let pangoWins = 0;\r\n            let i;\r\n            for (i = 0;i < object.length; i++) {\r\n                //    console.log(object[i].player_slot)\r\n                if (object[i].player_slot < 6 && object[i].radiant_win === true || object[i].player_slot > 5 && object[i].radiant_win === false)\r\n                    ++pangoWins;\r\n                }\r\n                console.log(pangoWins)\r\n                return pangoWins;\r\n            }\r\n            // let pangoWins = 0;\r\n            // for(let count in object) {\r\n            //     if (object.player_slot < 6 && object.radiant_win === true) {\r\n            //         ++pangoWins;\r\n            //     }\r\n            // console.log(pangoWins);\r\n            // return count;  \r\n            // }\r\n              \r\n        \r\n        this.setState(\r\n            {pangomatches : {\r\n                number : ObjectLength(data),\r\n                wins: WinTotal(data)\r\n            }\r\n            }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Pangolier Matches: {this.state.pangomatches.number}</h2>\r\n                <h2>Pangolier Wins: {this.state.pangomatches.wins}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport DoughnutExample from './components/doughnut';\nimport PangolierStats from './components/Pangolier'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n        <DoughnutExample/>\n        <PangolierStats/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.848b9045.png\";"],"sourceRoot":""}